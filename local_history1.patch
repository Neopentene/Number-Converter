Index: app/src/main/res/values/strings.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/values/strings.xml b/app/src/main/res/values/strings.xml
--- a/app/src/main/res/values/strings.xml	(date 1646893112939)
+++ b/app/src/main/res/values/strings.xml	(date 1646893112939)
@@ -11,6 +11,7 @@
     <string name="no">NO</string>
     <string name="cancel">CANCEL</string>
     <string name="clear">CLEAR</string>
+    <string name="close">CLOSE</string>
     <string name="back">BACK</string>
     <string name="cipher_input">Cipher Input</string>
     <string name="convert">Convert</string>
@@ -26,15 +27,6 @@
         \n<br />Aniruddha Khandekar
         \n<br />Celestyn Kinny
     </string>
-<<<<<<< HEAD
-    <string name="ok">OK</string>
-    <string name="no">No</string>
-    <string name="cancel">Cancel</string>
-    <string name="clear">Clear</string>
-    <string name="back">Back</string>
-    <string name="cipher_input">Cipher Input</string>
-    <string name="convert">Convert</string>
-=======
 
     <string name="help_DEC">Option: DEC (Decimal)
         \n<br /> Type - Input &amp; Output
@@ -66,5 +58,4 @@
         \n<br />Upon pressing the button Cipher Input, the input entered will be encrypted by images.
         \n<BR />Encryption will be done according to the options selected in settings.
     </string>
->>>>>>> 32eb12f (Application Commit)
 </resources>
\ No newline at end of file
Index: app/src/main/java/com/NumCo/numberconverter/Database/Settings.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/NumCo/numberconverter/Database/Settings.java b/app/src/main/java/com/NumCo/numberconverter/Database/Settings.java
--- a/app/src/main/java/com/NumCo/numberconverter/Database/Settings.java	(date 1646893757187)
+++ b/app/src/main/java/com/NumCo/numberconverter/Database/Settings.java	(date 1646893757187)
@@ -3,8 +3,6 @@
 import android.content.Context;
 import android.content.SharedPreferences;
 
-import com.NumCo.numberconverter.ObjectPainter.ObjectBitmapStatus;
-
 public class Settings {
     private final SharedPreferences cipherNumbers;
     private final SharedPreferences cipherColors;
@@ -23,43 +21,28 @@
         editorOtherSettings = otherSettings.edit();
     }
 
-    public String getCipherNumberFromId(String number) {
-        return cipherNumbers.getString(number, "ID" + number);
+    public int getCipherNumberFromId(String id) {
+        return cipherNumbers.getInt(id, Integer.parseInt(String.valueOf(id.charAt(id.length() - 1))));
     }
 
     public void setCipherNumberFromId(String id, int number) {
-        editorCipherNumbers.putString(String.valueOf(number), id).apply();
+        editorCipherNumbers.putInt(id, number).apply();
     }
 
-    public int getCipherColor(String id) {
-        return cipherColors.getInt(id, ObjectBitmapStatus.THEME.color);
+    public int getCipherColors(String id) {
+        return cipherColors.getInt(id, Integer.parseInt(String.valueOf(id.charAt(id.length() - 1))));
     }
 
-    public void setCipherColor(String id, int color) {
+    public void setCipherColors(String id, int color) {
         editorCipherColors.putInt(id, color).apply();
     }
 
     public int getOtherSettings(String id) {
-        return otherSettings.getInt(id, 2);
-    }
-
-    public int getImageColumns() {
-        return otherSettings.getInt("COL", 4);
-    }
-
-    public float getShapeResolution() {
-        return otherSettings.getFloat("RES", 0.7f);
-    }
-
-    public void setOtherSettings(String id, int value) {
-        editorOtherSettings.putInt(id, value).apply();
-    }
+        if (id.equals("RES"))
+            return otherSettings.getInt(id, 500);
+        if (id.equals("COL"))
+            return otherSettings.getInt(id, 5);
+        return otherSettings.getInt(id, 0);
 
-    public void setShapeResolution(float value) {
-        editorOtherSettings.putFloat("RES", value).apply();
-    }
-
-    public void setImageColumns(int value) {
-        editorOtherSettings.putInt("COL", value).apply();
     }
 }
Index: app/src/main/java/com/NumCo/numberconverter/Numerals/Octal.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/NumCo/numberconverter/Numerals/Octal.java b/app/src/main/java/com/NumCo/numberconverter/Numerals/Octal.java
--- a/app/src/main/java/com/NumCo/numberconverter/Numerals/Octal.java	(date 1646893112936)
+++ b/app/src/main/java/com/NumCo/numberconverter/Numerals/Octal.java	(date 1646893112936)
@@ -4,23 +4,11 @@
 
     private String octal;
 
-    public Octal(String octal){
+    public Octal(String octal) {
         super(octal);
         this.octal = octal;
     }
 
-<<<<<<< HEAD
-    public String toHex(){
-        return Integer.toHexString(Integer.parseInt(octal, 8));
-    }
-
-    public String toBin(){
-        return Integer.toBinaryString(Integer.parseInt(octal, 8));
-    }
-
-    public String toDec(){
-        return Integer.toString(Integer.parseInt(octal, 8));
-=======
     public String toHex() {
         return Long.toHexString(Long.parseLong(octal, 8));
     }
@@ -31,7 +19,6 @@
 
     public String toDec() {
         return Long.toString(Long.parseLong(octal, 8));
->>>>>>> 32eb12f (Application Commit)
     }
 
 }
Index: app/src/main/java/com/NumCo/numberconverter/Numerals/Binary.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/NumCo/numberconverter/Numerals/Binary.java b/app/src/main/java/com/NumCo/numberconverter/Numerals/Binary.java
--- a/app/src/main/java/com/NumCo/numberconverter/Numerals/Binary.java	(date 1646893112934)
+++ b/app/src/main/java/com/NumCo/numberconverter/Numerals/Binary.java	(date 1646893112934)
@@ -3,31 +3,21 @@
 public class Binary extends Numeral {
     private String binary;
 
-    public Binary(String binary){
+    public Binary(String binary) {
         super(binary);
         this.binary = binary;
     }
 
-<<<<<<< HEAD
-    public String toDec(){
-        return Integer.toString(Integer.parseInt(binary, 2));
-=======
     public String toDec() {
-        return Long.toString(Integer.parseInt(binary, 2));
->>>>>>> 32eb12f (Application Commit)
+        return Long.toString(Long.parseLong(binary, 2));
     }
 
     public String toHex() {
-        return Long.toHexString(Integer.parseInt(binary, 2));
+        return Long.toHexString(Long.parseLong(binary, 2));
     }
 
-<<<<<<< HEAD
-    public String toOct(){
-        return Integer.toOctalString(Integer.parseInt(binary, 2));
-=======
     public String toOct() {
-        return Long.toOctalString(Integer.parseInt(binary, 2));
->>>>>>> 32eb12f (Application Commit)
+        return Long.toOctalString(Long.parseLong(binary, 2));
     }
 
 }
Index: app/src/main/java/com/NumCo/numberconverter/Numerals/Decimal.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/NumCo/numberconverter/Numerals/Decimal.java b/app/src/main/java/com/NumCo/numberconverter/Numerals/Decimal.java
--- a/app/src/main/java/com/NumCo/numberconverter/Numerals/Decimal.java	(date 1646893112932)
+++ b/app/src/main/java/com/NumCo/numberconverter/Numerals/Decimal.java	(date 1646893112932)
@@ -4,34 +4,21 @@
 
     private String decimal;
 
-    public Decimal(String decimal){
+    public Decimal(String decimal) {
         super(decimal);
         this.decimal = decimal;
     }
 
-<<<<<<< HEAD
-    public String toHex(){
-        return Integer.toHexString(Integer.parseInt(decimal));
+    public String toHex() {
+        return Long.toHexString(Long.parseLong(decimal));
     }
 
-    public String toBin(){
-        return Integer.toBinaryString(Integer.parseInt(decimal));
+    public String toBin() {
+        return Long.toBinaryString(Long.parseLong(decimal));
     }
 
-    public String toOct(){
-        return Integer.toOctalString(Integer.parseInt(decimal));
-=======
-    public String toHex() {
-        return Long.toHexString(Integer.parseInt(decimal));
-    }
-
-    public String toBin() {
-        return Long.toBinaryString(Integer.parseInt(decimal));
-    }
-
     public String toOct() {
-        return Long.toOctalString(Integer.parseInt(decimal));
->>>>>>> 32eb12f (Application Commit)
+        return Long.toOctalString(Long.parseLong(decimal));
     }
 
 }
Index: app/src/main/java/com/NumCo/numberconverter/Numerals/Numeral.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/NumCo/numberconverter/Numerals/Numeral.java b/app/src/main/java/com/NumCo/numberconverter/Numerals/Numeral.java
--- a/app/src/main/java/com/NumCo/numberconverter/Numerals/Numeral.java	(date 1646893757188)
+++ b/app/src/main/java/com/NumCo/numberconverter/Numerals/Numeral.java	(date 1646893757188)
@@ -23,8 +23,4 @@
         return value;
     }
 
-    public void setValue(String value){
-        this.value = value;
-    }
-
 }
Index: app/src/main/java/com/NumCo/numberconverter/Numerals/Hexadecimal.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/NumCo/numberconverter/Numerals/Hexadecimal.java b/app/src/main/java/com/NumCo/numberconverter/Numerals/Hexadecimal.java
--- a/app/src/main/java/com/NumCo/numberconverter/Numerals/Hexadecimal.java	(date 1646893112930)
+++ b/app/src/main/java/com/NumCo/numberconverter/Numerals/Hexadecimal.java	(date 1646893112930)
@@ -3,34 +3,21 @@
 public class Hexadecimal extends Numeral {
     private String hexadecimal;
 
-    public Hexadecimal(String hexadecimal){
+    public Hexadecimal(String hexadecimal) {
         super(hexadecimal);
         this.hexadecimal = hexadecimal;
     }
 
-<<<<<<< HEAD
-    public String toDec(){
-        return "" + Integer.parseInt(hexadecimal, 16);
-    }
-
-    public String toBin(){
-        return Integer.toBinaryString(Integer.parseInt(hexadecimal, 16));
-    }
-
-    public String toOct(){
-        return Integer.toOctalString(Integer.parseInt(hexadecimal, 16));
-=======
     public String toDec() {
         return "" + Long.parseLong(hexadecimal, 16);
     }
 
     public String toBin() {
-        return Long.toBinaryString(Integer.parseInt(hexadecimal, 16));
+        return Long.toBinaryString(Long.parseLong(hexadecimal, 16));
     }
 
     public String toOct() {
-        return Long.toOctalString(Integer.parseInt(hexadecimal, 16));
->>>>>>> 32eb12f (Application Commit)
+        return Long.toOctalString(Long.parseLong(hexadecimal, 16));
     }
 
 }
Index: app/src/main/java/com/NumCo/numberconverter/ObjectPainter/BitmapObject.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/NumCo/numberconverter/ObjectPainter/BitmapObject.java b/app/src/main/java/com/NumCo/numberconverter/ObjectPainter/BitmapObject.java
new file mode 100644
--- /dev/null	(date 1646893684454)
+++ b/app/src/main/java/com/NumCo/numberconverter/ObjectPainter/BitmapObject.java	(date 1646893684454)
@@ -0,0 +1,49 @@
+package com.NumCo.numberconverter.ObjectPainter;
+
+import android.graphics.Bitmap;
+
+public class BitmapObject {
+
+    private String id;
+    private Bitmap bitmap;
+    private String description;
+    private ObjectBitmapStatus status;
+
+    public BitmapObject(String id, Bitmap bitmap, ObjectBitmapStatus status) {
+        this.id = id;
+        this.bitmap = bitmap;
+        this.status = status;
+    }
+
+    public String getId() {
+        return id;
+    }
+
+    public void setId(String id) {
+        this.id = id;
+    }
+
+    public Bitmap getBitmap() {
+        return bitmap;
+    }
+
+    public void setBitmap(Bitmap bitmap) {
+        this.bitmap = bitmap;
+    }
+
+    public String getDescription() {
+        return description;
+    }
+
+    public void setDescription(String description) {
+        this.description = description;
+    }
+
+    public ObjectBitmapStatus getBitmapStatus() {
+        return status;
+    }
+
+    public void setBitmapStatus(ObjectBitmapStatus status) {
+        this.status = status;
+    }
+}
Index: app/src/main/java/com/NumCo/numberconverter/CipherCreation/CipherHelpFragment.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/NumCo/numberconverter/CipherCreation/CipherHelpFragment.java b/app/src/main/java/com/NumCo/numberconverter/CipherCreation/CipherHelpFragment.java
--- a/app/src/main/java/com/NumCo/numberconverter/CipherCreation/CipherHelpFragment.java	(date 1646893112852)
+++ b/app/src/main/java/com/NumCo/numberconverter/CipherCreation/CipherHelpFragment.java	(date 1646893112852)
@@ -2,35 +2,21 @@
 
 import android.content.Context;
 import android.content.SharedPreferences;
-import android.graphics.Bitmap;
-import android.graphics.Color;
-import android.graphics.PorterDuff;
-import android.graphics.PorterDuffColorFilter;
 import android.os.Bundle;
 
-import androidx.annotation.NonNull;
-import androidx.annotation.Nullable;
 import androidx.fragment.app.Fragment;
-import androidx.viewpager2.widget.ViewPager2;
 
-import android.view.Gravity;
 import android.view.LayoutInflater;
 import android.view.View;
 import android.view.ViewGroup;
-import android.widget.ImageView;
-import android.widget.LinearLayout;
 import android.widget.ListView;
-import android.widget.ScrollView;
-import android.widget.TextView;
 
-import com.NumCo.numberconverter.Numerals.ConversionList;
+import com.NumCo.numberconverter.ConversionList;
 import com.NumCo.numberconverter.ObjectPainter.BitmapObject;
 import com.NumCo.numberconverter.ObjectPainter.ObjectBitmapStatus;
-import com.NumCo.numberconverter.ObjectPainter.Painter;
 import com.example.numberconverter.R;
 
 import java.util.ArrayList;
-import java.util.Objects;
 
 public class CipherHelpFragment extends Fragment {
     private final ConversionList conversionList = new ConversionList();
@@ -52,11 +38,14 @@
         String selectedInput = sharedPreferences.getString("input", "DEC");
 
         ArrayList<BitmapObject> objects = new ArrayList<>();
+
         if (!selectedInput.equals(selectedOutput)) {
             objects.add(cipherObjectBitmaps.constantObjects.get(selectedInput));
             objects.get(0).setBitmapStatus(ObjectBitmapStatus.ACTIVE_INPUT);
+
             objects.add(cipherObjectBitmaps.constantObjects.get(selectedOutput));
             objects.get(1).setBitmapStatus(ObjectBitmapStatus.ACTIVE_OUTPUT);
+
         } else {
             objects.add(cipherObjectBitmaps.constantObjects.get(selectedOutput));
             objects.get(0).setBitmapStatus(ObjectBitmapStatus.ERROR);
@@ -71,10 +60,4 @@
 
         return view;
     }
-
-    @Override
-    public void onResume() {
-        super.onResume();
-        requireView().requestLayout();
-    }
 }
\ No newline at end of file
Index: app/src/main/java/com/NumCo/numberconverter/CipherCreation/CipherImageCreator.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/NumCo/numberconverter/CipherCreation/CipherImageCreator.java b/app/src/main/java/com/NumCo/numberconverter/CipherCreation/CipherImageCreator.java
--- a/app/src/main/java/com/NumCo/numberconverter/CipherCreation/CipherImageCreator.java	(date 1646893757186)
+++ b/app/src/main/java/com/NumCo/numberconverter/CipherCreation/CipherImageCreator.java	(date 1646893757186)
@@ -1,74 +1,12 @@
 package com.NumCo.numberconverter.CipherCreation;
 
-import android.content.Context;
-import android.graphics.Bitmap;
-import android.graphics.ColorFilter;
-import android.graphics.PorterDuff;
-import android.graphics.PorterDuffColorFilter;
-import android.util.Log;
-
-import com.NumCo.numberconverter.Database.Settings;
-import com.NumCo.numberconverter.ObjectPainter.BitmapObject;
-import com.NumCo.numberconverter.ObjectPainter.Painter;
-
-import java.util.Objects;
-
 public class CipherImageCreator {
-    private String decimal;
-    private Settings settings;
-    private CipherObjectBitmaps cipherObjectBitmaps;
-    private Painter painter;
-
-    public CipherImageCreator(String decimal, CipherObjectBitmaps cipherObjectBitmaps, Context context) {
-        this.decimal = decimal;
-        this.settings = new Settings(context);
-        this.cipherObjectBitmaps = cipherObjectBitmaps;
-    }
-
-    public Bitmap generate() {
-        float resolution = settings.getShapeResolution();
-        int columns = settings.getImageColumns(), count = 0;
-        int rows = (int) Math.ceil((double) decimal.length() / columns);
-
-
-        Bitmap[] bitmaps = new Bitmap[decimal.length()];
-
-        for(char character: decimal.toCharArray()){
-            painter = new Painter(500, 500);
-            ColorFilter colorFilter = new PorterDuffColorFilter(
-                    settings.getCipherColor("ID" + character),
-                    PorterDuff.Mode.SRC_IN);
-            bitmaps[count] = painter
-                    .drawBitmap(0, 0,
-                            Objects.requireNonNull(cipherObjectBitmaps.objects
-                                    .get("ID" + character))
-                                    .getBitmap(),
-                            colorFilter)
-                    .scale(resolution, resolution)
-                    .getBitmap();
-            count++;
-        }
-
-        painter = new Painter((500 * resolution) * columns,
-                (500 * resolution) * (int) Math.ceil((double) decimal.length() / columns));
-        count = 0;
-
-        for(int row = 0; row < rows; row++){
-            for(int col = 0; col < columns; col++){
-
-                if(count >= bitmaps.length)
-                    break;
+    private String input;
 
-                painter.drawBitmap((float) painter.width / columns * col,
-                        (float) painter.height / rows * row,
-                        bitmaps[count], null);
-                count++;
-            }
-        }
+    public CipherImageCreator(String input){
+        this.input = input;
+    }
 
-        Log.e("Count:", count + ", " + bitmaps.length);
 
-        return painter.getBitmap();
-    }
 
 }
Index: app/src/main/java/com/NumCo/numberconverter/CipherCreation/CipherObjectBitmaps.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/NumCo/numberconverter/CipherCreation/CipherObjectBitmaps.java b/app/src/main/java/com/NumCo/numberconverter/CipherCreation/CipherObjectBitmaps.java
--- a/app/src/main/java/com/NumCo/numberconverter/CipherCreation/CipherObjectBitmaps.java	(date 1646893112844)
+++ b/app/src/main/java/com/NumCo/numberconverter/CipherCreation/CipherObjectBitmaps.java	(date 1646893112844)
@@ -12,50 +12,86 @@
 import java.util.HashMap;
 
 public class CipherObjectBitmaps {
-    public ArrayList<BitmapObject> objects = new ArrayList<>();
+    public HashMap<String, BitmapObject> objects = new HashMap<>();
     public HashMap<String, BitmapObject> constantObjects = new HashMap<>();
-    public short columns = 0;
+    public String[] keyArray = {"ID0", "ID1", "ID2", "ID3", "ID4", "ID5", "ID6", "ID7", "ID8", "ID9"};
 
     public CipherObjectBitmaps(Integer color) {
         addConstantObjects(color);
     }
 
-    public CipherObjectBitmaps(Short columns) {
-        this.columns = columns;
+    public CipherObjectBitmaps() {
         addObjects();
     }
 
-    public BitmapObject getBitmapById(String id) {
-        int objectIndex = 0;
-        while (!objects.get(objectIndex).getId().equals(id))
-            objectIndex++;
-
-        return objects.get(objectIndex);
-    }
-
     /**
      * Usage example
      * <code>
      * objects.add(new BitmapObject("Something",
-     *                 new Painter(500, 500, Bitmap.Config.ARGB_8888)
-     *                 .drawBorderedRoundedRectangle(20 * 3, 20 * 3, 180 * 3, 180 * 3, 10 * 3, 10 * 3, 5 * 3, Color.BLUE)
-     *                 .drawArc(40 * 3, 40 * 3, 160 * 3, 160 * 3, 30, 120, true, Color.GREEN)
-     *                 .drawBorderedArc(40 * 3, 40 * 3, 160 * 3, 160 * 3, -30, -120, false, 5 * 3, Color.GREEN)
-     *                 .drawBorderedCircle(100 * 3, 100 * 3, 25 * 3, 5 * 3, Color.MAGENTA)
-     *                 .getBitmap()
-     *         , ObjectBitmapStatus.NORMAL));
+     * new Painter(500, 500, Bitmap.Config.ARGB_8888)
+     * .drawBorderedRoundedRectangle(20 * 3, 20 * 3, 180 * 3, 180 * 3, 10 * 3, 10 * 3, 5 * 3, Color.BLUE)
+     * .drawArc(40 * 3, 40 * 3, 160 * 3, 160 * 3, 30, 120, true, Color.GREEN)
+     * .drawBorderedArc(40 * 3, 40 * 3, 160 * 3, 160 * 3, -30, -120, false, 5 * 3, Color.GREEN)
+     * .drawBorderedCircle(100 * 3, 100 * 3, 25 * 3, 5 * 3, Color.MAGENTA)
+     * .getBitmap()
+     * , ObjectBitmapStatus.NORMAL));
      * </code>
      */
 
     private void addObjects() {
-        Bitmap bitmap = Bitmap.createBitmap(500, 500, Bitmap.Config.ARGB_8888);
-        objects.add(new BitmapObject("Something", new Painter(bitmap)
-                                 .drawBorderedRoundedRectangle(20 * 3, 20 * 3, 180 * 3, 180 * 3, 10 * 3, 10 * 3, 5 * 3, Color.BLUE)
-                                 .drawArc(40 * 3, 40 * 3, 160 * 3, 160 * 3, 30, 120, true, Color.GREEN)
-                                 .drawBorderedArc(40 * 3, 40 * 3, 160 * 3, 160 * 3, -30, -120, false, 5 * 3, Color.GREEN)
-                                 .drawBorderedCircle(100 * 3, 100 * 3, 25 * 3, 5 * 3, Color.MAGENTA)
-                                 .getBitmap()
-                         , ObjectBitmapStatus.NORMAL));
+        objects.put("ID0", new BitmapObject("ID0", new Painter(500)
+                .drawArc(80, 80, 420, 420, 30, 120, true, Color.GREEN)
+                .drawLine(85, 250, 415, 250, 15, Color.BLACK)
+                .drawBorderedArc(80, 80, 420, 420, 30, -240, false, 15, Color.GREEN)
+                .drawBorderedCircle(65, 15, Color.MAGENTA)
+                .drawBorderedCircle(30, 10, Color.MAGENTA)
+                .getBitmap()
+                , ObjectBitmapStatus.NORMAL));
+
+        objects.put("ID1", new BitmapObject("ID1", new Painter(500)
+                .drawBorderedCircle(170, 15, Color.RED)
+                .drawBorderedCircle(80, 15, Color.GREEN)
+                .getBitmap(), ObjectBitmapStatus.NORMAL));
+
+        objects.put("ID2", new BitmapObject("ID2", new Painter(500)
+                .drawBorderedCircle(200, 10, Color.RED)
+                .drawBorderedRectangle(100f, 150f, 400f, 350f, 5, Color.YELLOW)
+                .getBitmap(), ObjectBitmapStatus.NORMAL));
+
+        objects.put("ID3", new BitmapObject("ID3", new Painter(500)
+                .drawBorderedRectangle(100f, 150f, 400f, 350f, 5, Color.YELLOW)
+                .drawBorderedArc(100f, 150f, 400f, 350f, 0, 180, false, 5, Color.MAGENTA)
+                .getBitmap(), ObjectBitmapStatus.NORMAL));
+
+        objects.put("ID4", new BitmapObject("ID4", new Painter(500)
+                .drawBorderedArc(100, 150, 400, 350, 180, 360, false, 5, Color.MAGENTA)
+                .drawLine(250, 150, 250, 350, 5, Color.BLUE)
+                .getBitmap(), ObjectBitmapStatus.NORMAL));
+
+        objects.put("ID5", new BitmapObject("ID5", new Painter(500)
+                .drawRoundedBorderAroundBitmap(30, 10, ObjectBitmapStatus.NORMAL.color)
+                .drawTextAtCenter("ID5", Typeface.create(Typeface.SERIF, Typeface.BOLD), 65, ObjectBitmapStatus.NORMAL.color)
+                .getBitmap(), ObjectBitmapStatus.NORMAL));
+
+        objects.put("ID6", new BitmapObject("ID5", new Painter(500)
+                .drawRoundedBorderAroundBitmap(30, 10, ObjectBitmapStatus.NORMAL.color)
+                .drawTextAtCenter("ID6", Typeface.create(Typeface.SERIF, Typeface.BOLD), 65, ObjectBitmapStatus.NORMAL.color)
+                .getBitmap(), ObjectBitmapStatus.NORMAL));
+
+        objects.put("ID7", new BitmapObject("ID7", new Painter(500)
+                .drawRoundedBorderAroundBitmap(30, 10, ObjectBitmapStatus.NORMAL.color)
+                .drawTextAtCenter("ID7", Typeface.create(Typeface.SERIF, Typeface.BOLD), 65, ObjectBitmapStatus.NORMAL.color)
+                .getBitmap(), ObjectBitmapStatus.NORMAL));
+
+        objects.put("ID8", new BitmapObject("ID8", new Painter(500)
+                .drawRoundedBorderAroundBitmap(30, 10, ObjectBitmapStatus.NORMAL.color)
+                .drawTextAtCenter("ID8", Typeface.create(Typeface.SERIF, Typeface.BOLD), 65, ObjectBitmapStatus.NORMAL.color)
+                .getBitmap(), ObjectBitmapStatus.NORMAL));
+
+        objects.put("ID9", new BitmapObject("ID9", new Painter(500)
+                .drawRoundedBorderAroundBitmap(30, 10, ObjectBitmapStatus.NORMAL.color)
+                .drawTextAtCenter("ID9", Typeface.create(Typeface.SERIF, Typeface.BOLD), 65, ObjectBitmapStatus.NORMAL.color)
+                .getBitmap(), ObjectBitmapStatus.NORMAL));
     }
 
     private void addConstantObjects(int color) {
@@ -72,7 +108,7 @@
         constantObjects.put("HEX", new BitmapObject("HEX", new Painter(200, 150, Bitmap.Config.ARGB_8888)
                 .drawRoundedBorderAroundBitmap(30, 10, color)
                 .drawTextAtCenter("HEX", Typeface.create(Typeface.SERIF, Typeface.BOLD), 65, color)
-                .getBitmap(),ObjectBitmapStatus.DISABLED));
+                .getBitmap(), ObjectBitmapStatus.DISABLED));
 
         constantObjects.put("OCT", new BitmapObject("OCT", new Painter(200, 150, Bitmap.Config.ARGB_8888)
                 .drawRoundedBorderAroundBitmap(30, 10, color)
@@ -83,5 +119,10 @@
                 .drawRoundedBorderAroundBitmap(30, 10, color)
                 .drawTextAtCenter("BIN", Typeface.create(Typeface.SERIF, Typeface.BOLD), 65, color)
                 .getBitmap(), ObjectBitmapStatus.DISABLED));
+
+        constantObjects.put("CIPHER", new BitmapObject("CIPHER", new Painter(325, 150, Bitmap.Config.ARGB_8888)
+                .drawRoundedBorderAroundBitmap(30, 10, color)
+                .drawTextAtCenter("CIPHER", Typeface.create(Typeface.SERIF, Typeface.BOLD), 65, color)
+                .getBitmap(), ObjectBitmapStatus.THEME));
     }
 }
Index: app/src/main/java/com/NumCo/numberconverter/CipherCreation/ConstantObjectAdapter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/NumCo/numberconverter/CipherCreation/ConstantObjectAdapter.java b/app/src/main/java/com/NumCo/numberconverter/CipherCreation/ConstantObjectAdapter.java
--- a/app/src/main/java/com/NumCo/numberconverter/CipherCreation/ConstantObjectAdapter.java	(date 1646893038640)
+++ b/app/src/main/java/com/NumCo/numberconverter/CipherCreation/ConstantObjectAdapter.java	(date 1646893038640)
@@ -25,8 +25,8 @@
 
 public class ConstantObjectAdapter extends ArrayAdapter<BitmapObject> {
 
-    private FragmentActivity mContext;
-    private ArrayList<BitmapObject> constantObjects = null;
+    private final FragmentActivity mContext;
+    private final ArrayList<BitmapObject> constantObjects;
 
     public ConstantObjectAdapter(@NonNull FragmentActivity context, @NonNull ArrayList<BitmapObject> objects) {
         super(context, R.layout.help_input_output_layout, objects);
@@ -49,37 +49,38 @@
         textView.setText(mContext.getResources().getIdentifier("help_" + constantObjects.get(position).getId(), "string", mContext.getPackageName()));
 
         ObjectBitmapStatus status = constantObjects.get(position).getBitmapStatus();
-        TextView statusTextView = new TextView(mContext);
+
+        if (status != ObjectBitmapStatus.DISABLED) {
+
+            TextView statusTextView = new TextView(mContext);
+            statusTextView.setTextColor(status.color);
+            statusTextView.setGravity(Gravity.CENTER);
 
-        switch (status) {
-            case ERROR:
-                imageView.setColorFilter(new PorterDuffColorFilter(status.color,
-                        PorterDuff.Mode.SRC_IN));
-                statusTextView.setText("Input and Output");
-                statusTextView.setTextColor(status.color);
-                statusTextView.setGravity(Gravity.CENTER);
-                statusTextView.setPadding(0, (int) Math.ceil((double) 15 * mContext.getResources().getDisplayMetrics().scaledDensity), 0, 0);
-                linearLayout.addView(statusTextView, 0);
-                break;
-            case ACTIVE_INPUT:
-                imageView.setColorFilter(new PorterDuffColorFilter(status.color,
-                        PorterDuff.Mode.SRC_IN));
-                statusTextView.setText("Selected Input");
-                statusTextView.setTextColor(status.color);
-                statusTextView.setGravity(Gravity.CENTER);
-                linearLayout.addView(statusTextView, 0);
-                break;
-            case ACTIVE_OUTPUT:
-                imageView.setColorFilter(new PorterDuffColorFilter(status.color,
-                        PorterDuff.Mode.SRC_IN));
-                statusTextView.setText("Selected Output");
-                statusTextView.setTextColor(status.color);
-                statusTextView.setGravity(Gravity.CENTER);
-                statusTextView.setPadding(0, (int) Math.ceil((double) 15 * mContext.getResources().getDisplayMetrics().scaledDensity), 0, 0);
-                linearLayout.addView(statusTextView, 0);
-                break;
-        }
+            imageView.setColorFilter(new PorterDuffColorFilter(status.color,
+                    PorterDuff.Mode.SRC_IN));
+
+            switch (status) {
+                case ERROR:
+                    statusTextView.setText("Input and Output");
+                    linearLayout.addView(statusTextView, 0);
+                    break;
+                case ACTIVE_INPUT:
+                    statusTextView.setText("Selected Input");
+                    linearLayout.addView(statusTextView, 0);
+                    break;
+                case ACTIVE_OUTPUT:
+                    statusTextView.setText("Selected Output");
+                    linearLayout.addView(statusTextView, 0);
+                    break;
+            }
 
+            if (position == 0)
+                statusTextView.setPadding(0,
+                        (int) Math.ceil((double) 15 * mContext.getResources().getDisplayMetrics().scaledDensity),
+                        0,
+                        0);
+        }
+
         if (position == constantObjects.size() - 1)
             divider.setVisibility(View.INVISIBLE);
 
Index: app/src/main/java/com/NumCo/numberconverter/CipherCreation/CipherSettingsFragment.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/NumCo/numberconverter/CipherCreation/CipherSettingsFragment.java b/app/src/main/java/com/NumCo/numberconverter/CipherCreation/CipherSettingsFragment.java
--- a/app/src/main/java/com/NumCo/numberconverter/CipherCreation/CipherSettingsFragment.java	(date 1646893112839)
+++ b/app/src/main/java/com/NumCo/numberconverter/CipherCreation/CipherSettingsFragment.java	(date 1646893112839)
@@ -29,8 +29,11 @@
         ImageView imageView = view.findViewById(R.id.imageSettings);
         CipherObjectBitmaps cipherObjectBitmaps = new CipherObjectBitmaps();
         Painter painter = new Painter(500, 500 * cipherObjectBitmaps.objects.size());
-        for (int i = 0; i < cipherObjectBitmaps.objects.size(); i++) {
-            painter.drawBitmap(0, 500 * i, cipherObjectBitmaps.objects.get(i).getBitmap(), null);
+
+        int i = 0;
+        for (BitmapObject bitmapObject: cipherObjectBitmaps.objects.values()) {
+            painter.drawBitmap(0, 500 * i, bitmapObject.getBitmap(), null);
+            i++;
         }
 
         /*
@@ -44,10 +47,4 @@
         imageView.setImageBitmap(painter.getBitmap());
         return view;
     }
-
-    @Override
-    public void onResume() {
-        super.onResume();
-        requireView().requestLayout();
-    }
 }
\ No newline at end of file
Index: app/src/main/java/com/NumCo/numberconverter/CipherCreation/CipherImageDialog.java
===================================================================
diff --git a/app/src/main/java/com/NumCo/numberconverter/CipherCreation/CipherImageDialog.java b/app/src/main/java/com/NumCo/numberconverter/CipherCreation/CipherImageDialog.java
deleted file mode 100644
--- a/app/src/main/java/com/NumCo/numberconverter/CipherCreation/CipherImageDialog.java	(date 0)
+++ /dev/null	(date 0)
@@ -1,57 +0,0 @@
-package com.NumCo.numberconverter.CipherCreation;
-
-import android.app.Dialog;
-import android.content.Context;
-import android.graphics.Bitmap;
-import android.graphics.Typeface;
-import android.os.Bundle;
-import android.view.WindowManager;
-import android.widget.ImageView;
-import android.widget.TextView;
-
-import androidx.annotation.NonNull;
-
-import com.example.numberconverter.R;
-import com.google.android.material.button.MaterialButton;
-
-public class CipherImageDialog extends Dialog {
-    private Bitmap bitmap;
-
-    public CipherImageDialog(@NonNull Context context, Bitmap bitmap) {
-        super(context);
-        this.bitmap = bitmap;
-    }
-
-    @Override
-    protected void onCreate(Bundle savedInstanceState) {
-        super.onCreate(savedInstanceState);
-        setContentView(R.layout.cipher_image_dialog);
-        ImageView imageView = findViewById(R.id.cipherImage);
-        imageView.setImageBitmap(bitmap);
-
-        MaterialButton backButton = findViewById(R.id.cipherBackButton);
-        backButton.setText(R.string.back);
-        backButton.setOnClickListener(v -> dismiss());
-
-        MaterialButton saveButton = findViewById(R.id.cipherSaveButton);
-        saveButton.setText(R.string.save);
-        saveButton.setOnClickListener(v -> dismiss());
-
-        TextView title = findViewById(R.id.cipherTitle);
-        title.setTextColor(getContext().getResources().getColor(R.color.dark_blue));
-        title.setTypeface(null, Typeface.BOLD);
-        title.setTextSize(20);
-
-        getWindow().setBackgroundDrawableResource(R.drawable.transparent_dialog_inset_10_30);
-
-        WindowManager.LayoutParams params = getWindow().getAttributes();
-        params.width = WindowManager.LayoutParams.MATCH_PARENT;
-
-        getWindow().setAttributes(params);
-    }
-
-    @Override
-    public void show() {
-        super.show();
-    }
-}
Index: app/src/main/java/com/NumCo/numberconverter/CipherCreation/CipherConstantObjectBitmaps.java
===================================================================
diff --git a/app/src/main/java/com/NumCo/numberconverter/CipherCreation/CipherConstantObjectBitmaps.java b/app/src/main/java/com/NumCo/numberconverter/CipherCreation/CipherConstantObjectBitmaps.java
deleted file mode 100644
--- a/app/src/main/java/com/NumCo/numberconverter/CipherCreation/CipherConstantObjectBitmaps.java	(date 0)
+++ /dev/null	(date 0)
@@ -1,100 +0,0 @@
-package com.NumCo.numberconverter.CipherCreation;
-
-import android.graphics.Bitmap;
-import android.graphics.Typeface;
-import android.os.Parcel;
-import android.os.Parcelable;
-
-import com.NumCo.numberconverter.ObjectPainter.BitmapObject;
-import com.NumCo.numberconverter.ObjectPainter.ObjectBitmapStatus;
-import com.NumCo.numberconverter.ObjectPainter.Painter;
-
-import java.util.HashMap;
-import java.util.Map;
-
-public class CipherConstantObjectBitmaps implements Parcelable {
-    public HashMap<String, BitmapObject> constantObjects = new HashMap<>();
-
-    public CipherConstantObjectBitmaps() {
-        addConstantObjects();
-    }
-
-    protected CipherConstantObjectBitmaps(Parcel in) {
-        int size = in.readInt();
-        while(size > 0){
-            constantObjects.put(in.readString(),
-                    (BitmapObject) in.readParcelable(BitmapObject.class.getClassLoader()));
-            size--;
-        }
-    }
-
-    private void addConstantObjects() {
-        constantObjects.put("DEC", new BitmapObject("DEC",
-                new Painter(200, 150, Bitmap.Config.ARGB_8888)
-                        .drawRoundedBorderAroundBitmap(30, 10, ObjectBitmapStatus.DISABLED.color)
-                        .drawTextAtCenter("DEC", Typeface.create(Typeface.SERIF, Typeface.BOLD),
-                                65, ObjectBitmapStatus.DISABLED.color)
-                        .getBitmap(), ObjectBitmapStatus.DISABLED));
-
-        constantObjects.put("ROM", new BitmapObject("ROM",
-                new Painter(200, 150, Bitmap.Config.ARGB_8888)
-                        .drawRoundedBorderAroundBitmap(30, 10, ObjectBitmapStatus.DISABLED.color)
-                        .drawTextAtCenter("ROM", Typeface.create(Typeface.SERIF, Typeface.BOLD),
-                                65, ObjectBitmapStatus.DISABLED.color)
-                        .getBitmap(), ObjectBitmapStatus.DISABLED));
-
-        constantObjects.put("HEX", new BitmapObject("HEX",
-                new Painter(200, 150, Bitmap.Config.ARGB_8888)
-                        .drawRoundedBorderAroundBitmap(30, 10, ObjectBitmapStatus.DISABLED.color)
-                        .drawTextAtCenter("HEX", Typeface.create(Typeface.SERIF, Typeface.BOLD),
-                                65, ObjectBitmapStatus.DISABLED.color)
-                        .getBitmap(), ObjectBitmapStatus.DISABLED));
-
-        constantObjects.put("OCT", new BitmapObject("OCT",
-                new Painter(200, 150, Bitmap.Config.ARGB_8888)
-                        .drawRoundedBorderAroundBitmap(30, 10, ObjectBitmapStatus.DISABLED.color)
-                        .drawTextAtCenter("OCT", Typeface.create(Typeface.SERIF, Typeface.BOLD),
-                                65, ObjectBitmapStatus.DISABLED.color)
-                        .getBitmap(), ObjectBitmapStatus.DISABLED));
-
-        constantObjects.put("BIN", new BitmapObject("BIN",
-                new Painter(200, 150, Bitmap.Config.ARGB_8888)
-                        .drawRoundedBorderAroundBitmap(30, 10, ObjectBitmapStatus.DISABLED.color)
-                        .drawTextAtCenter("BIN", Typeface.create(Typeface.SERIF, Typeface.BOLD),
-                                65, ObjectBitmapStatus.DISABLED.color)
-                        .getBitmap(), ObjectBitmapStatus.DISABLED));
-
-        constantObjects.put("CIPHER", new BitmapObject("CIPHER",
-                new Painter(325, 150, Bitmap.Config.ARGB_8888)
-                        .drawRoundedBorderAroundBitmap(30, 10, ObjectBitmapStatus.DISABLED.color)
-                        .drawTextAtCenter("CIPHER", Typeface.create(Typeface.SERIF, Typeface.BOLD),
-                                65, ObjectBitmapStatus.DISABLED.color)
-                        .getBitmap(), ObjectBitmapStatus.THEME));
-    }
-
-    public static final Creator<CipherConstantObjectBitmaps> CREATOR = new Creator<CipherConstantObjectBitmaps>() {
-        @Override
-        public CipherConstantObjectBitmaps createFromParcel(Parcel in) {
-            return new CipherConstantObjectBitmaps(in);
-        }
-
-        @Override
-        public CipherConstantObjectBitmaps[] newArray(int size) {
-            return new CipherConstantObjectBitmaps[size];
-        }
-    };
-
-    @Override
-    public int describeContents() {
-        return 0;
-    }
-
-    @Override
-    public void writeToParcel(Parcel dest, int flags) {
-        dest.writeInt(constantObjects.size());
-        for (Map.Entry<String, BitmapObject> entries : constantObjects.entrySet()) {
-            dest.writeString(entries.getKey());
-            dest.writeParcelable(entries.getValue(), flags);
-        }
-    }
-}
Index: app/src/main/java/com/NumCo/numberconverter/Converter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/NumCo/numberconverter/Converter.java b/app/src/main/java/com/NumCo/numberconverter/Converter.java
--- a/app/src/main/java/com/NumCo/numberconverter/Converter.java	(date 1646893112825)
+++ b/app/src/main/java/com/NumCo/numberconverter/Converter.java	(date 1646893112825)
@@ -1,12 +1,10 @@
 package com.NumCo.numberconverter;
 
-import androidx.appcompat.app.AlertDialog;
-import androidx.appcompat.app.AppCompatActivity;
-
 import android.content.ClipData;
 import android.content.ClipboardManager;
 import android.content.Context;
 import android.content.SharedPreferences;
+import android.graphics.Color;
 import android.graphics.Typeface;
 import android.os.Bundle;
 import android.os.Handler;
@@ -17,21 +15,21 @@
 import android.view.View;
 import android.widget.ArrayAdapter;
 import android.widget.AutoCompleteTextView;
-import android.widget.RelativeLayout;
+import android.widget.ScrollView;
 import android.widget.TextView;
-import android.widget.Toast;
 
-<<<<<<< HEAD
-=======
+import androidx.appcompat.app.AlertDialog;
+import androidx.appcompat.app.AppCompatActivity;
+
 import com.NumCo.numberconverter.CipherCreation.CipherObjectBitmaps;
 import com.NumCo.numberconverter.CipherCreation.CipherPreferencesDialog;
->>>>>>> 32eb12f (Application Commit)
-import com.NumCo.numberconverter.Numerals.Octal;
-import com.NumCo.numberconverter.Numerals.RomanNumeral;
 import com.NumCo.numberconverter.Numerals.Binary;
 import com.NumCo.numberconverter.Numerals.Decimal;
 import com.NumCo.numberconverter.Numerals.Hexadecimal;
 import com.NumCo.numberconverter.Numerals.Numeral;
+import com.NumCo.numberconverter.Numerals.Octal;
+import com.NumCo.numberconverter.Numerals.RomanNumeral;
+import com.NumCo.numberconverter.ObjectPainter.ObjectBitmapStatus;
 import com.example.numberconverter.R;
 import com.google.android.material.button.MaterialButton;
 import com.google.android.material.snackbar.Snackbar;
@@ -41,29 +39,27 @@
 
 public class Converter extends AppCompatActivity {
 
-    private static final String[] inputConversionList = {"DEC", "HEX", "OCT", "BIN"};
-    private static final String[] outputConversionList = {"ROM", "DEC", "HEX", "OCT", "BIN"};
+    private static final ConversionList conversionList = new ConversionList();
+    private static final String[] inputConversionList = conversionList.inputConversionList;
+    private static final String[] outputConversionList = conversionList.outputConversionList;
 
     private static String inputOption = "";
     private static String outputOption = "";
 
     private static Numeral numeral;
-
+    TextInputLayout displayOutput;
+    TextInputLayout displayInput;
     private AutoCompleteTextView inputConversionAutoText = null;
+    private TextInputLayout inputConversionLayout = null;
     private TextInputLayout outputConversionLayout = null;
     private AutoCompleteTextView outputConversionAutoText = null;
-    private RelativeLayout parentLayout = null;
-
-    TextInputLayout displayOutput;
-    TextInputLayout displayInput;
-
+    private ScrollView parentLayout = null;
     private SharedPreferences sharedPreferences;
 
     private Context context;
     private short cipherPreferencesDialogCounter = 0;
     private CipherPreferencesDialog cipherPreferencesDialog;
 
-
     @Override
     protected void onCreate(Bundle savedInstanceState) throws NullPointerException {
         super.onCreate(savedInstanceState);
@@ -71,11 +67,11 @@
 
         context = this;
 
-        TextInputLayout inputConversionLayout = findViewById(R.id.InputConversion);
+        inputConversionLayout = findViewById(R.id.InputConversion);
         inputConversionAutoText = findViewById(R.id.InputConversionDropdown);
         outputConversionLayout = findViewById(R.id.OutputConversion);
         outputConversionAutoText = findViewById(R.id.OutputConversionDropdown);
-        parentLayout = findViewById(R.id.parentRelativeConvertor);
+        parentLayout = findViewById(R.id.parentScrollViewConvertor);
 
         displayInput = findViewById(R.id.InputIn);
         displayOutput = findViewById(R.id.OutputOut);
@@ -90,13 +86,12 @@
 
         setInputOnChangeListener();
         setOutputOnChangeListener();
+        setOnKeyListeners();
 
         inputConversionAutoText.setText(inputOption, false);
         outputConversionAutoText.setText(outputOption, false);
     }
 
-<<<<<<< HEAD
-=======
     @Override
     protected void onResume() {
         super.onResume();
@@ -104,7 +99,6 @@
         changeOutputAdapter(inputOption);
     }
 
->>>>>>> 32eb12f (Application Commit)
     private void setInputOnChangeListener() throws NullPointerException {
         inputConversionAutoText.addTextChangedListener(new TextWatcher() {
             @Override
@@ -126,7 +120,7 @@
                 editor.putString("input", inputOption);
                 editor.apply();
 
-                setNumsObject(Objects.requireNonNull(displayInput.getEditText()).getText().toString());
+                setNumeralObject(Objects.requireNonNull(displayInput.getEditText()).getText().toString());
 
                 changeOutputAdapter(inputOption);
             }
@@ -166,58 +160,80 @@
         });
     }
 
-    private void setNumsObject(String value) throws NullPointerException {
+    private void setOnKeyListeners() {
+        inputConversionAutoText.setOnKeyListener((v, keyCode, event) -> {
+            if (keyCode == 66) {
+                Objects.requireNonNull(displayInput.getEditText()).requestFocus();
+                return true;
+            }
+            return false;
+        });
+
+        outputConversionAutoText.setOnKeyListener((v, keyCode, event) -> {
+            Snackbar.make(parentLayout, event.getAction() + ", " + keyCode, Snackbar.LENGTH_SHORT).setBackgroundTint(ObjectBitmapStatus.ERROR.color).show();
 
+            if (keyCode == 66) {
+                Objects.requireNonNull(displayInput.getEditText()).requestFocus();
+                return true;
+            }
+            return false;
+        });
+
+        Objects.requireNonNull(displayInput.getEditText()).setOnKeyListener((v, keyCode, event) -> {
+            if (keyCode == 66) {
+                convert();
+                return true;
+            }
+            return false;
+        });
+    }
+
+    private void setNumeralObject(String value) throws NullPointerException {
         switch (inputOption) {
             case "DEC":
-                Objects.requireNonNull(displayInput.getEditText()).setInputType(InputType.TYPE_CLASS_NUMBER);
+                Objects.requireNonNull(displayInput.getEditText()).setInputType(InputType.TYPE_CLASS_NUMBER | InputType.TYPE_NUMBER_FLAG_SIGNED);
                 numeral = new Decimal(value);
                 break;
             case "HEX":
-                Objects.requireNonNull(displayInput.getEditText()).setInputType(InputType.TYPE_CLASS_TEXT);
+                Objects.requireNonNull(displayInput.getEditText()).setInputType(InputType.TYPE_CLASS_TEXT | InputType.TYPE_NUMBER_FLAG_SIGNED);
                 numeral = new Hexadecimal(value);
                 break;
             case "OCT":
-                Objects.requireNonNull(displayInput.getEditText()).setInputType(InputType.TYPE_CLASS_NUMBER);
+                Objects.requireNonNull(displayInput.getEditText()).setInputType(InputType.TYPE_CLASS_NUMBER | InputType.TYPE_NUMBER_FLAG_SIGNED);
                 numeral = new Octal(value);
                 break;
             case "BIN":
-                Objects.requireNonNull(displayInput.getEditText()).setInputType(InputType.TYPE_CLASS_NUMBER);
+                Objects.requireNonNull(displayInput.getEditText()).setInputType(InputType.TYPE_CLASS_NUMBER | InputType.TYPE_NUMBER_FLAG_SIGNED);
                 numeral = new Binary(value);
                 break;
         }
     }
 
     private void changeOutputAdapter(String value) {
-        outputConversionAutoText.setAdapter(new ArrayAdapter<>(context, R.layout.support_simple_spinner_dropdown_item, removeListItem(value)));
+        outputConversionAutoText.setAdapter(new ArrayAdapter<>(context, R.layout.support_simple_spinner_dropdown_item, removeStringArrayItem(outputConversionList, value)));
     }
 
     private void setInputAdapter() {
         inputConversionAutoText.setAdapter(new ArrayAdapter<>(context, R.layout.support_simple_spinner_dropdown_item, inputConversionList));
     }
 
-    private String[] removeListItem(String item) {
-        boolean itemFound = false;
-        int listItem = 0;
-        String[] newList = new String[Converter.outputConversionList.length];
-
-        for (String s : Converter.outputConversionList) {
-            if (s.equals(item)) {
-                itemFound = true;
-            } else {
-                newList[listItem] = s;
-                listItem++;
-            }
-        }
-
-        if (itemFound) {
-            return newList;
-        }
-        return outputConversionList;
+    public void exchangeInputOutput(View v) {
+        if (!outputOption.equals("ROM")) {
+            String temp = inputOption;
+            inputOption = outputOption;
+            outputOption = temp;
+            outputConversionAutoText.setText(temp, false);
+            inputConversionAutoText.setText(inputOption, false);
+        } else
+            makeSnackBar("Cannot Interchange Options", ObjectBitmapStatus.ACTIVE_OUTPUT.color);
     }
 
     public void convert(View v) {
-        setNumsObject(Objects.requireNonNull(displayInput.getEditText()).getText().toString().trim());
+        convert();
+    }
+
+    private void convert() {
+        setNumeralObject(Objects.requireNonNull(displayInput.getEditText()).getText().toString().trim());
         try {
             if (inputOption.equals(outputOption))
                 throw new IllegalStateException();
@@ -240,18 +256,12 @@
                     break;
             }
         } catch (Exception e) {
-            if (displayInput.getEditText().getText().toString().trim().equals(""))
-<<<<<<< HEAD
-                Toast.makeText(context, "Input Empty", Toast.LENGTH_SHORT).show();
-            else
-                Toast.makeText(context, "Invalid Output Selection", Toast.LENGTH_SHORT).show();
-=======
-                Snackbar.make(parentLayout, "Input Empty", Snackbar.LENGTH_SHORT).show();
-            else if (inputOption.equals(outputOption))
-                Snackbar.make(parentLayout, "Invalid Output Selection", Snackbar.LENGTH_SHORT).show();
+            if (inputOption.equals(outputOption))
+                makeSnackBar("Invalid Output Selection", ObjectBitmapStatus.ERROR.color);
+            else if (displayInput.getEditText().getText().toString().trim().equals(""))
+                makeSnackBar("Input Empty", ObjectBitmapStatus.ERROR.color);
             else
-                Snackbar.make(parentLayout, "Invalid Input", Snackbar.LENGTH_SHORT).show();
->>>>>>> 32eb12f (Application Commit)
+                makeSnackBar("Invalid Input", ObjectBitmapStatus.ERROR.color);
         }
     }
 
@@ -261,14 +271,11 @@
 
         if (!output.trim().isEmpty()) {
             ClipboardManager clipboardManager = (ClipboardManager) getSystemService(Context.CLIPBOARD_SERVICE);
-            ClipData clipData = ClipData.newPlainText("Output Copied", output);
+            ClipData clipData = ClipData.newPlainText(outputOption, output);
             clipboardManager.setPrimaryClip(clipData);
-
-            Toast.makeText(context, "Output Copied to Clipboard", Toast.LENGTH_LONG).show();
-
-        } else {
-            Toast.makeText(context, "Output is Empty", Toast.LENGTH_LONG).show();
-        }
+            makeSnackBar("Output Copied to Clipboard", ObjectBitmapStatus.THEME.color);
+        } else
+            makeSnackBar("Output is Empty", ObjectBitmapStatus.ACTIVE_INPUT.color);
     }
 
     public void aboutUsDialog(View v) {
@@ -294,8 +301,6 @@
 
         actionButton.setOnClickListener(v1 -> dialog.dismiss());
     }
-<<<<<<< HEAD
-=======
 
     public void cipherPreferencesDialog(View v) {
         if (++cipherPreferencesDialogCounter == 1) {
@@ -307,5 +312,30 @@
             });
         }
     }
->>>>>>> 32eb12f (Application Commit)
+
+    private static String[] removeStringArrayItem(String[] list, String item) {
+        boolean itemFound = false;
+        int listItem = -1;
+        String[] newList = new String[list.length - 1];
+
+        for (String s : list) {
+            if (s.equals(item)) {
+                itemFound = true;
+            } else {
+                if (listItem + 1 == newList.length)
+                    break;
+                newList[++listItem] = s;
+            }
+        }
+
+        if (itemFound) {
+            return newList;
+        }
+        return list;
+    }
+
+    private void makeSnackBar(String msg, int color) {
+        final Snackbar snackbar = Snackbar.make(parentLayout, msg, Snackbar.LENGTH_SHORT).setBackgroundTint(color);
+        snackbar.setAction(R.string.close, v -> snackbar.dismiss()).setActionTextColor(Color.WHITE).show();
+    }
 }
\ No newline at end of file
Index: app/src/main/java/com/NumCo/numberconverter/SplashScreen.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/NumCo/numberconverter/SplashScreen.java b/app/src/main/java/com/NumCo/numberconverter/SplashScreen.java
--- a/app/src/main/java/com/NumCo/numberconverter/SplashScreen.java	(date 1646893757190)
+++ b/app/src/main/java/com/NumCo/numberconverter/SplashScreen.java	(date 1646893757190)
@@ -12,8 +12,6 @@
 import android.view.View;
 import android.widget.ImageView;
 
-import com.NumCo.numberconverter.CipherCreation.CipherConstantObjectBitmaps;
-import com.NumCo.numberconverter.CipherCreation.CipherObjectBitmaps;
 import com.example.numberconverter.R;
 
 @SuppressLint("CustomSplashScreen")
@@ -32,16 +30,13 @@
         launchConverter();
     }
 
-    private void launchConverter() {
+    private void launchConverter(){
         Handler handler = new Handler(Looper.getMainLooper());
 
         ObjectAnimator.ofFloat(icon, View.ALPHA, 0f, 1f).setDuration(1500).start();
 
-        CipherObjectBitmaps cipherObjectBitmaps = new CipherObjectBitmaps();
-        CipherConstantObjectBitmaps cipherConstantObjectBitmaps = new CipherConstantObjectBitmaps();
-
-        Intent intent = new Intent(context, Converter.class);
         handler.postDelayed(() -> {
+            Intent intent = new Intent(context, Converter.class);
             intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);
             startActivity(intent);
             finish();
